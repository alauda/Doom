diff --git a/node_modules/unist-util-visit-parents/lib/complex-types.d.ts b/node_modules/unist-util-visit-parents/lib/complex-types.d.ts
index ef06b3a..171081c 100644
--- a/node_modules/unist-util-visit-parents/lib/complex-types.d.ts
+++ b/node_modules/unist-util-visit-parents/lib/complex-types.d.ts
@@ -4,19 +4,41 @@ import type {Node, Parent} from 'unist'
 import type {Test} from 'unist-util-is'
 import type {Visitor} from './index.js'
 
+export type Uint = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10
+
+export type Increment<I extends Uint = 0> = I extends 0
+  ? 1
+  : I extends 1
+  ? 2
+  : I extends 2
+  ? 3
+  : I extends 3
+  ? 4
+  : I extends 4
+  ? 5
+  : I extends 5
+  ? 6
+  : I extends 6
+  ? 7
+  : I extends 7
+  ? 8
+  : I extends 8
+  ? 9
+  : 10
+
 /**
  * Internal utility to collect all descendants of in `Tree`.
  */
 export type InclusiveDescendant<
-  Tree extends Node = never,
-  Found = void
+  Tree extends Node,
+  Max extends Uint = 10,
+  Depth extends Uint = 0
 > = Tree extends Parent
-  ?
-      | Tree
-      | InclusiveDescendant<
-          Exclude<Tree['children'][number], Found | Tree>,
-          Found | Tree
-        >
+  ? Depth extends Max
+    ? Tree
+    :
+        | Tree
+        | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>
   : Tree
 
 /**
